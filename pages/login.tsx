import router, { useRouter } from "next/router";
import Head from "next/head";
import LoginForm from "@/components/page/login/LoginForm";
import LoginTop from "@/components/page/login/LoginTop";
import NavigationButton from "@/components/ui/NavigationButton";
import StButton from "@/components/ui/StButton";

import { useRecoilState } from "recoil";
import { useState } from "react";
import { LoginReq } from "@/Types/UserRequest/Request";
import Swal from "sweetalert2";
import { RequestLogin } from "@/Service/AuthService/AuthService";
import { LoginRes } from "@/Types/UserRequest/Response";
import { userLoginState } from "@/state/user/atom/userLoginState";
import { useLottie } from "lottie-react";
import Congratulation from "@/public/assets/lottie/congratulations.json";
import CongratulationAnimation from "@/components/modals/CongratulationAnimation";
import { UserAuthInfo } from "@/state/user/type/UserInfo";

export default function LoginModal() {
  const [loginData, setLoginData] =
    useRecoilState<UserAuthInfo>(userLoginState);
  const options = {
    animationData: Congratulation,
    loop: false,
    autoplay: true,
  };
  const [isView, setIsView] = useState<boolean>(false);
  const { View } = useLottie(options);

  const [inputData, setInputData] = useState<LoginReq>({
    userEmail: "",
    password: "",
  });

  const handleSubmit = () => {
    if (inputData.userEmail !== "" && inputData.password !== "") {
      RequestLogin({
        userEmail: inputData.userEmail,
        password: inputData.password,
      })
        .then((res) => {
          const loginRes: LoginRes = res.data;
          const accessToken = loginRes.accessToken;
          const userId = loginRes.userId;
          setLoginData({
            userId: userId,
            isLogin: true,
          });
          localStorage.setItem("ACCESS_TOKEN", accessToken);
          setIsView(true);
          Swal.fire({
            icon: "success",
            title: `${loginRes.userName}님 환영합니다!`,
            toast: true,
            position: "top",
            color: "#009b39",
            background: "#fff",
            showConfirmButton: false,
            timer: 2000,
          }).then(() => {
            router.back();
          });
        })
        .catch((err) => {
          console.log(err);
          Swal.fire({
            icon: "error",
            text: "Login Error!",
          });
        });
    } else {
      Swal.fire({
        text: "아이디와 비밀번호를 입력해주세요!",
        color: "#fff",
        background: "#009b39",
        toast: true,
        showConfirmButton: false,
        position: "top",
        timer: 2000,
        timerProgressBar: true,
      });
    }
  };

  return (
    <div className="modalWrap">
      <Head>
        <title>로그인</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isView && <CongratulationAnimation />}
      <NavigationButton heading="left" />
      <div className="slide-in-login">
        <LoginTop />
        <LoginForm inputData={inputData} setInputData={setInputData} />
      </div>
      <div className="submit-container">
        <StButton
          type="button"
          buttonText="로그인하기"
          textSize="0.9rem"
          handler={handleSubmit}
        />
      </div>
    </div>
  );
}
